
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: contours.operator.projectcontour.io
spec:
  group: operator.projectcontour.io
  names:
    kind: Contour
    listKind: ContourList
    plural: contours
    singular: contour
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Available")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Available")].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Contour is the Schema for the contours API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of Contour.
            properties:
              gatewayClassRef:
                default: None
                description: GatewayClassRef is a reference to a GatewayClass name used for managing a Contour.
                type: string
              namespace:
                default:
                  name: projectcontour
                  removeOnDeletion: false
                description: Namespace defines the schema of a Contour namespace. See each field for additional details.
                properties:
                  name:
                    default: projectcontour
                    description: Name is the name of the namespace to run Contour and dependent resources. If unset, defaults to "projectcontour".
                    type: string
                  removeOnDeletion:
                    default: false
                    description: "RemoveOnDeletion will remove the namespace when the Contour is deleted. If set to True, deletion will not occur if any of the following conditions exist: \n 1. The Contour namespace is \"default\", \"kube-system\" or the    contour-operator's namespace. \n 2. Another Contour exists in the namespace. \n 3. The namespace does not contain the Contour owning label."
                    type: boolean
                type: object
              networkPublishing:
                default:
                  envoy:
                    containerPorts:
                    - name: http
                      portNumber: 8080
                    - name: https
                      portNumber: 8443
                    type: LoadBalancerService
                description: "NetworkPublishing defines the schema for publishing Contour to a network. \n See each field for additional details."
                properties:
                  envoy:
                    default:
                      containerPorts:
                      - name: http
                        portNumber: 8080
                      - name: https
                        portNumber: 8443
                      loadBalancer:
                        providerParameters:
                          type: AWS
                        scope: External
                      type: LoadBalancerService
                    description: "Envoy provides the schema for publishing the network endpoints of Envoy. \n If unset, defaults to:   type: LoadBalancerService   containerPorts:   - name: http     portNumber: 8080   - name: https     portNumber: 8443"
                    properties:
                      containerPorts:
                        default:
                        - name: http
                          portNumber: 8080
                        - name: https
                          portNumber: 8443
                        description: "ContainerPorts is a list of container ports to expose from the Envoy container(s). Exposing a port here gives the system additional information about the network connections the Envoy container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed by Envoy. Any port which is listening on the default \"0.0.0.0\" address inside the Envoy container will be accessible from the network. Names and port numbers must be unique in the list container ports. Two ports must be specified, one named \"http\" for Envoy's insecure service and one named \"https\" for Envoy's secure service. \n TODO [danehans]: Update minItems to 1, requiring only https when the following issue is fixed: https://github.com/projectcontour/contour/issues/2577. \n TODO [danehans]: Increase maxItems when https://github.com/projectcontour/contour/pull/3263 is implemented."
                        items:
                          description: ContainerPort is the schema to specify a network port for a container. A container port gives the system additional information about network connections a container uses, but is primarily informational.
                          properties:
                            name:
                              description: Name is an IANA_SVC_NAME within the pod.
                              maxLength: 253
                              minLength: 1
                              type: string
                            portNumber:
                              description: PortNumber is the network port number to expose on the envoy pod. The number must be greater than 0 and less than 65536.
                              format: int32
                              maximum: 65535
                              minimum: 1
                              type: integer
                          required:
                          - name
                          - portNumber
                          type: object
                        maxItems: 2
                        minItems: 2
                        type: array
                      loadBalancer:
                        default:
                          providerParameters:
                            type: AWS
                          scope: External
                        description: "loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService. \n If unspecified, defaults to an external Classic AWS ELB."
                        properties:
                          providerParameters:
                            default:
                              type: AWS
                            description: providerParameters contains load balancer information specific to the underlying infrastructure provider.
                            properties:
                              type:
                                default: AWS
                                description: type is the underlying infrastructure provider for the load balancer. Allowed values are "AWS", "Azure", and "GCP".
                                enum:
                                - AWS
                                - Azure
                                - GCP
                                type: string
                            type: object
                          scope:
                            default: External
                            description: Scope indicates the scope at which the load balancer is exposed. Possible values are "External" and "Internal".
                            enum:
                            - Internal
                            - External
                            type: string
                        type: object
                      type:
                        default: LoadBalancerService
                        description: "Type is the type of publishing strategy to use. Valid values are: \n * LoadBalancerService \n In this configuration, network endpoints for Envoy use container networking. A Kubernetes LoadBalancer Service is created to publish Envoy network endpoints. The Service uses port 80 to publish Envoy's HTTP network endpoint and port 443 to publish Envoy's HTTPS network endpoint. \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer \n * NodePortService \n Publishes Envoy network endpoints using a Kubernetes NodePort Service. \n In this configuration, Envoy network endpoints use container networking. A Kubernetes NodePort Service is created to publish the network endpoints. \n See: https://kubernetes.io/docs/concepts/services-networking/service/#nodeport"
                        enum:
                        - LoadBalancerService
                        - NodePortService
                        type: string
                    type: object
                type: object
              replicas:
                default: 2
                description: Replicas is the desired number of Contour replicas. If unset, defaults to 2.
                format: int32
                minimum: 0
                type: integer
            type: object
          status:
            description: Status defines the observed state of Contour.
            properties:
              availableContours:
                description: AvailableContours is the number of observed available replicas according to the Contour deployment. The deployment and its pods will reside in the namespace specified by spec.namespace.name of the contour.
                format: int32
                type: integer
              availableEnvoys:
                description: AvailableEnvoys is the number of observed available pods from the Envoy daemonset. The daemonset and its pods will reside in the namespace specified by spec.namespace.name of the contour.
                format: int32
                type: integer
              conditions:
                description: "Conditions represent the observations of a contour's current state. Known condition types are \"Available\". Reference the condition type for additional details. \n TODO [danehans]: Add support for \"Progressing\" and \"Degraded\" condition types."
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            required:
            - availableContours
            - availableEnvoys
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
