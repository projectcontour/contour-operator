name: Build and Test

# Trigger the workflow on push or pull request
on:
  # Run once per day
  schedule:
    - cron: '0 0 * * *'
  push:
    branches-ignore:
      - "dependabot/**"
  pull_request:

env:
  GOPROXY: https://proxy.golang.org/
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GO_VERSION: 1.19.2
jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ github.job }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-go-
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: deps
        run: |
          ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
      - name: test
        run: |
          make test
      - name: codeCoverage
        if: ${{ success() }}
        uses: codecov/codecov-action@v3
        with:
          files: coverage.out
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
  test-example-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        # use stable kubernetes_version values since they're included
        # in the name of the GitHub Actions job, and we don't want to
        # have to update branch protection rules every time we change
        # a Kubernetes version number.
        kubernetes_version: ["kubernetes:latest", "kubernetes:n-1", "kubernetes:n-2"]
        # include defines an additional variable (the specific node
        # image to use) for each kubernetes_version value.
        include:
          - kubernetes_version: "kubernetes:latest"
            node_image: "docker.io/kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e"
          - kubernetes_version: "kubernetes:n-1"
            node_image: "docker.io/kindest/node:v1.23.6@sha256:b1fa224cc6c7ff32455e0b1fd9cbfd3d3bc87ecaa8fcb06961ed1afb3db0f9ae"
          - kubernetes_version: "kubernetes:n-2"
            node_image: "docker.io/kindest/node:v1.22.9@sha256:8135260b959dfe320206eb36b3aeda9cffcb262f4b44cda6b33f7bb73f453105"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ github.job }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-go-
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: deps
        run: |
          ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
      - name: test-example
        env:
          NODEIMAGE: ${{ matrix.node_image }}
        run: |
          make local-cluster load-image example test-example
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
  test-e2e-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # use stable kubernetes_version values since they're included
        # in the name of the GitHub Actions job, and we don't want to
        # have to update branch protection rules every time we change
        # a Kubernetes version number.
        kubernetes_version: ["kubernetes:latest", "kubernetes:n-1", "kubernetes:n-2"]
        # include defines an additional variable (the specific node
        # image to use) for each kubernetes_version value.
        include:
          - kubernetes_version: "kubernetes:latest"
            node_image: "docker.io/kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e"
          - kubernetes_version: "kubernetes:n-1"
            node_image: "docker.io/kindest/node:v1.23.6@sha256:b1fa224cc6c7ff32455e0b1fd9cbfd3d3bc87ecaa8fcb06961ed1afb3db0f9ae"
          - kubernetes_version: "kubernetes:n-2"
            node_image: "docker.io/kindest/node:v1.22.9@sha256:8135260b959dfe320206eb36b3aeda9cffcb262f4b44cda6b33f7bb73f453105"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ github.job }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-go-
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: deps
        run: |
          ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
      - name: test-e2e
        env:
          NODEIMAGE: ${{ matrix.node_image }}
        run: |
          make local-cluster load-image test-e2e
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
  codespell:
    name: Codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - name: Codespell
        uses: codespell-project/actions-codespell@master
        with:
          skip: .git,./vendor,go.*
          ignore_words_file: './.codespell.ignorewords'
          check_filenames: true
          check_hidden: true
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.48.0
          args: --build-tags=e2e,tools
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
  codegen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ github.job }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-go-
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: add deps to path
        run: |
          ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: generate
        run: |
          make generate generate-contour-crds generate-gateway-crds manifests example
          ./hack/actions/check-uncommitted-codegen.sh
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}

